package 多线程;


class Ticket implements Runnable{
	//1.描述票的数量
	private int tickets = 100;
	
	private Object obj = new Object();
	
	//2.售票的动作， 这个动作需要被多线程执行， 那就是线程任务代码，需要定义run方法中。
	//线程任务中通常都有循环结构
	public void run() {
		
		while(true) {
			synchronized(obj){
				if (tickets > 0) {
//				
//					//要让线程在这里稍停，模拟问题的发生 sleep  看到了0 - 1- 2 错误的数据， 这个就是传说中的多线程安全问题。
//					try{Thread.sleep(10);}catch(InterruptedException e){/*未写处理异常*/}
//				
//					System.out.println(Thread.currentThread().getName()+ "…………" + tickets--);
					sale();
					
				}
			}
		}
	}
	
	
	public /*synchronized*/ void sale() {

		//要让线程在这里稍停，模拟问题的发生 sleep  看到了0 - 1- 2 错误的数据， 这个就是传说中的多线程安全问题。
		try{Thread.sleep(10);}catch(InterruptedException e){/*未写处理异常*/}
	
		System.out.println(Thread.currentThread().getName()+ "…………" + tickets--);
	}
	
}



public class TreadDemo3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//1.创建Runnable接口的子类对象
		Ticket t = new Ticket();
		
		//2.创建四个线程对象，并将Runnable接口的子类对象作为参数传给Thread的构造函数
		Thread t1 = new Thread(t);
		Thread t2 = new Thread(t);
		Thread t3 = new Thread(t);
		Thread t4 = new Thread(t);
		
		
		//3.开启四个线程
		t1.start();
		t2.start();
		t3.start();
		t4.start();
		
		
	}

}
